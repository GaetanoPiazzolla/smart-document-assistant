/* tslint:disable */
/* eslint-disable */
/**
 * Sia Backend API
 * This is the backend for the Sia project.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ChatMessageBody
 */
export interface ChatMessageBody {
    /**
     * 
     * @type {string}
     * @memberof ChatMessageBody
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatMessageBody
     */
    'chatId'?: string;
}
/**
 * 
 * @export
 * @interface DocumentDTO
 */
export interface DocumentDTO {
    /**
     * 
     * @type {number}
     * @memberof DocumentDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocumentDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentDTO
     */
    'type'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocumentDTO
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocumentDTO
     */
    'uploadedAt'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocumentDTO
     */
    'vectorStoreUUIDs'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UploadFileRequest
 */
export interface UploadFileRequest {
    /**
     * 
     * @type {File}
     * @memberof UploadFileRequest
     */
    'file': File;
}

/**
 * AssistantControllerApi - axios parameter creator
 * @export
 */
export const AssistantControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChatMessageBody} chatMessageBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chat: async (chatMessageBody: ChatMessageBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatMessageBody' is not null or undefined
            assertParamExists('chat', 'chatMessageBody', chatMessageBody)
            const localVarPath = `/api/v1/assistant/chat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatMessageBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssistantControllerApi - functional programming interface
 * @export
 */
export const AssistantControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssistantControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ChatMessageBody} chatMessageBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chat(chatMessageBody: ChatMessageBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chat(chatMessageBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssistantControllerApi.chat']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AssistantControllerApi - factory interface
 * @export
 */
export const AssistantControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssistantControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ChatMessageBody} chatMessageBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chat(chatMessageBody: ChatMessageBody, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.chat(chatMessageBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssistantControllerApi - object-oriented interface
 * @export
 * @class AssistantControllerApi
 * @extends {BaseAPI}
 */
export class AssistantControllerApi extends BaseAPI {
    /**
     * 
     * @param {ChatMessageBody} chatMessageBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssistantControllerApi
     */
    public chat(chatMessageBody: ChatMessageBody, options?: RawAxiosRequestConfig) {
        return AssistantControllerApiFp(this.configuration).chat(chatMessageBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DocumentControllerApi - axios parameter creator
 * @export
 */
export const DocumentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/document/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {UploadFileRequest} [uploadFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: async (name: string, uploadFileRequest?: UploadFileRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('uploadFile', 'name', name)
            const localVarPath = `/api/v1/document`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadFileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentControllerApi - functional programming interface
 * @export
 */
export const DocumentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocumentDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentControllerApi.getAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} name 
         * @param {UploadFileRequest} [uploadFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFile(name: string, uploadFileRequest?: UploadFileRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(name, uploadFileRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentControllerApi.uploadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DocumentControllerApi - factory interface
 * @export
 */
export const DocumentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: any): AxiosPromise<Array<DocumentDTO>> {
            return localVarFp.getAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {UploadFileRequest} [uploadFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(name: string, uploadFileRequest?: UploadFileRequest, options?: any): AxiosPromise<DocumentDTO> {
            return localVarFp.uploadFile(name, uploadFileRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentControllerApi - object-oriented interface
 * @export
 * @class DocumentControllerApi
 * @extends {BaseAPI}
 */
export class DocumentControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public getAll(options?: RawAxiosRequestConfig) {
        return DocumentControllerApiFp(this.configuration).getAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {UploadFileRequest} [uploadFileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public uploadFile(name: string, uploadFileRequest?: UploadFileRequest, options?: RawAxiosRequestConfig) {
        return DocumentControllerApiFp(this.configuration).uploadFile(name, uploadFileRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



